search <- function(keyword){
RISmed::EUtilsSummary(keyword, type="esearch", db="pubmed", datetype='pdat', mindate=2000, maxdate=2015, retmax=500)
}
result  <- "sedation"
result  <- search("sedation")
result
result  <- search("sedation[MeSH]")
result
search <- function(keyword){
RISmed::QueryCount(EUtilsSummary(keyword, type="esearch", db="pubmed", datetype='pdat'))
}
result  <- search("sedation[MeSH]")
library(RISmed)
search <- function(keyword){
QueryCount(EUtilsSummary(keyword, type="esearch", db="pubmed", datetype='pdat'))
}
result  <- search("sedation[MeSH]")
result
search <- function(keyword){
QueryCount(EUtilsSummary(keyword))
}
(result  <- search("sedation[MeSH]"))
(result  <- search("sedation"))
(result  <- search("nursing[MeSH]"))
(result  <- search("conscious sedation[MeSH]"))
(result  <- search("deep sedation[MeSH]"))
(result  <- search("deep sedation[MeSH]", "nursing[MeSH]",))
QueryCount(EUtilsSummary("deep sedation[MeSH] AND nursing[MeSH]"))
source("search.R")
res <- EUtilsSummary("deep sedation[MeSH]")
fetch  <- RISmed::EUtilsGet(res)
RISmed::MeSH(res)
mesh(fethc)
RISmed::mesh(fetch)
RISmed::Mesh(fetch)
RISmed::signature("sedation")
fetch
library(RISmed)
EUtilsGet(res)
EUtilsSummary("nursisng", db - "MeSH")
EUtilsSummary("nursisng", db = "MeSH")
EUtilsSummary("Evidence-Based Nursing", db = "MeSH")
QueryCount(EUtilsSummary("Evidence-Based Nursing", db = "MeSH"))
Query(EUtilsSummary("Evidence-Based Nursing", db = "MeSH"))
Query("Evidence-Based Nursing", db = "MeSH")
Query("Evidence-Based Nursing")
devtools::install_github("openefsa/abstractScreening")
AbstractScreening::runShiny()
devtools::install_github("openefsa/abstractScreening")
res <- search("nursing[MeSH]")
test <- function() {
# Here we can either check objects created in the solution code, or the
# string value of the solution, available as .solution. See the testTemplate
# in the meta.json for details.
if (!grepl("search(nursing[MeSH])", res, fixed = TRUE)) {
stop("Are you searching for the correct term?")
}
success("Well done!")
}
test
test(res)
test()
!grepl("search(nursing[MeSH])", res, fixed = TRUE)
grepl("search(nursing[MeSH])", res, fixed = TRUE)
test <- function() {
# Here we can either check objects created in the solution code, or the
# string value of the solution, available as .solution. See the testTemplate
# in the meta.json for details.
if (!grepl("search(nursing[MeSH])", res, fixed = TRUE)) {
stop("Are you searching for the correct term?")
}
success("Well done!")
}
test()
res <- "search("nursing[MeSH]")"
res <- "searchnursing[MeSH]
test <- function() {
# Here we can either check objects created in the solution code, or the
# string value of the solution, available as .solution. See the testTemplate
# in the meta.json for details.
if (!grepl("search(nursing[MeSH])", res, fixed = TRUE)) {
stop("Are you searching for the correct term?")
}
success("Well done!")
}
test()
res <- "searchnursing[MeSH]"
test <- function() {
# Here we can either check objects created in the solution code, or the
# string value of the solution, available as .solution. See the testTemplate
# in the meta.json for details.
if (!grepl("search(nursing[MeSH])", res, fixed = TRUE)) {
stop("Are you searching for the correct term?")
}
success("Well done!")
}
test()
test <- function() {
# Here we can either check objects created in the solution code, or the
# string value of the solution, available as .solution. See the testTemplate
# in the meta.json for details.
if (!grepl("searchnursing[MeSH]", res, fixed = TRUE)) {
stop("Are you searching for the correct term?")
}
success("Well done!")
}
test()
# Here we can either check objects created in the solution code, or the
# string value of the solution, available as .solution. See the testTemplate
# in the meta.json for details.
if (!grepl("searchnursing[MeS", res, fixed = TRUE)) {
stop("Are you searching for the correct term?")
}
test <- function() {
# Here we can either check objects created in the solution code, or the
# string value of the solution, available as .solution. See the testTemplate
# in the meta.json for details.
if (!grepl("searchnursing[MeS", res, fixed = TRUE)) {
stop("Are you searching for the correct term?")
}
success("Well done!")
}
test()
grepl("search("nursing[MeSH]")", res, fixed = TRUE)
!grepl(search("nursing[MeSH]"), res, fixed = TRUE)
!grepl(search("nursing[MeSH]"), .solution, fixed = TRUE)
grepl(search("nursing[MeSH]"), res, fixed = TRUE))
grepl(search("nursing[MeSH]"), res, fixed = TRUE)
res <- search("nursing[MeSH]")
grepl(search("nursing[MeSH]"), res, fixed = TRUE)
!grepl(search("nursing[MeSH]"), res, fixed = TRUE))
!grepl(search("nursing[MeSH]"), res, fixed = TRUE)
if (!grepl(search("nursing[MeSH]"), res, fixed = TRUE)) {
stop("Are you searching for the correct term?")
}
test <- function() {
# Here we can either check objects created in the solution code, or the
# string value of the solution, available as .solution. See the testTemplate
# in the meta.json for details.
if (!grepl(search("nursing[MeSH]"), res, fixed = TRUE)) {
stop("Are you searching for the correct term?")
}
# This function is defined in the testTemplate
success("Well done!")
}
test()
search("nursing[MeSH]")
source("search.R")
(result <- search("____[MeSH]"))
(result <- search("Nursing[MeSH]"))
(result <- search("nursing[MeSH] AND intentional rounding[TIAB]"))
if (result < 50) {
stop("Are you searching for the correct term?")
}
install.packages("processx")
processx::run("gatsby develop")
processx::run("gatsby", "develop")
processx::run("ls)
processx::run("ls")
processx::run("gatsby", c("develop"))
processx::run("gatsby", c("develop"), spinner = TRUE)
processx::run("gatsby", c("develop"), spinner = TRUE, echo = TRUE)
n
processx::run("gatsby", c("develop"), spinner = TRUE, echo = TRUE)
n
processx::run("gatsby", c("develop"), spinner = TRUE, echo = TRUE)
Y
processx::get_status()
proc$get_status()
processx::stop()
stop("gatsby")
kill()
pkill()
processx::stop()
install.packages("praise")
praise::praise()
praise::praise()
praise::praise()
praise::praise()
praise::praise()
praise::praise()
praise::praise()
praise::praise()
praise::praise()
praise::praise()
praise::praise()
praise::praise()
praise::praise()
praise::praise()
praise::praise()
praise::praise()
praise::praise()
praise::praise()
praise::praise()
praise::praise()
praise::praise()
install.packages("hypothesisr")
library(hypothesisr)
test <- hs_search_all("https://nur1027-fall-2019.netlify.com/")
test <- hs_search_all(custom = "https://nur1027-fall-2019.netlify.com/")
test <- hs_search_all(custom = c("https://nur1027-fall-2019.netlify.com/"))
test <- hs_search_all(custom = list(uriparts("https://nur1027-fall-2019.netlify.com/")))
test <- hs_search_all(custom = list(uriparts = "https://nur1027-fall-2019.netlify.com/"))
test <- hs_search(custom = list(uriparts = "https://nur1027-fall-2019.netlify.com/"))
test
test <- hs_search(custom = list(uriparts = "nur1027-fall-2019"))
test
test$text
test$uri
test <- hs_search(custom = "nur1027-fall-2019")
